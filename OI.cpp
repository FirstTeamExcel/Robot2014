// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "OI.h"
//#define VERBOSE_DASHBOARD
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/ArcadeDrive.h"
#include "Commands/ArmTargetPosition.h"
#include "Commands/AutoShiftMode.h"
#include "Commands/AutoTarget.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/CameraTuning.h"
#include "Commands/CatchClose.h"
#include "Commands/CatchOpen.h"
#include "Commands/CheesyDrive.h"
#include "Commands/Collect.h"
#include "Commands/CollectThenFlip.h"
#include "Commands/CollectorDown.h"
#include "Commands/CollectorEject.h"
#include "Commands/CollectorIdle.h"
#include "Commands/CollectorLoad.h"
#include "Commands/CollectorUP.h"
#include "Commands/CompressorStart.h"
#include "Commands/CompressorStop.h"
#include "Commands/CradleEject.h"
#include "Commands/DetectHotGoal.h"
#include "Commands/DownShift.h"
#include "Commands/Drive.h"
#include "Commands/DriveStraightTuning.h"
#include "Commands/DriveToEncoderCommand.h"
#include "Commands/DriveTwoBall.h"
#include "Commands/EjectBallCommand.h"
#include "Commands/ForceShot.h"
#include "Commands/InvertedCheesy.h"
#include "Commands/LoadBallCommand.h"
#include "Commands/ManualFlipperDown.h"
#include "Commands/ManualFlipperUp.h"
#include "Commands/ManualRollerControl.h"
#include "Commands/OperatorRollerControl.h"
#include "Commands/PoweredShot.h"
#include "Commands/Shoot.h"
#include "Commands/ShooterArmTuningMode.h"
#include "Commands/ShooterIdle.h"
#include "Commands/ShooterPistonIdle.h"
#include "Commands/ShooterSetRpm.h"
#include "Commands/ShooterSpinUp.h"
#include "Commands/ShotTuning.h"
#include "Commands/SingleBallAutonomousCommand.h"
#include "Commands/SpinLoad.h"
#include "Commands/SpinLongGoal.h"
#include "Commands/SpinReverseShortGoal.h"
#include "Commands/SpinShortGoal.h"
#include "Commands/SpinToss.h"
#include "Commands/SpinTruss.h"
#include "Commands/StartingPosition.h"
#include "Commands/TargetStartPosition.h"
#include "Commands/ThreeBallAutonomousCommand.h"
#include "Commands/Turn180Degrees.h"
#include "Commands/Turn90Degrees.h"
#include "Commands/TurnToAngleTurning.h"
#include "Commands/TurtleStance.h"
#include "Commands/TwoBallAutonomousCommand.h"
#include "Commands/UpShift.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/ArmTargetPosition.h"
OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveController = new Joystick(4);
	
	shiftDownButton = new JoystickButton(driveController, 9);
	shiftDownButton->WhenPressed(new DownShift());
	shiftUpButton = new JoystickButton(driveController, 10);
	shiftUpButton->WhenPressed(new UpShift());
	collectorIntake = new JoystickButton(driveController, 3);
	collectorIntake->WhileHeld(new CollectorLoad());
	collectorSpit = new JoystickButton(driveController, 4);
	collectorSpit->WhileHeld(new CradleEject());
	invertDrive = new JoystickButton(driveController, 6);
	invertDrive->WhileHeld(new InvertedCheesy());
	overrideShot = new JoystickButton(driveController, 1);
	overrideShot->WhileHeld(new ForceShot());
	upSpin = new JoystickButton(driveController, 2);
	upSpin->WhileHeld(new ShooterSpinUp());
	ballShoot = new JoystickButton(driveController, 8);
	ballShoot->WhileHeld(new Shoot());
	downCollector = new JoystickButton(driveController, 7);
	downCollector->WhileHeld(new CollectThenFlip());
	upCollector = new JoystickButton(driveController, 5);
	upCollector->WhileHeld(new CollectorUP());
	operatorStick = new Joystick(3);
	
	catcherClose = new JoystickButton(operatorStick, 4);
	catcherClose->WhenPressed(new CatchClose());
	catcherOpen = new JoystickButton(operatorStick, 6);
	catcherOpen->WhenPressed(new CatchOpen());
	targetLoadPosition = new JoystickButton(operatorStick, 11);
	targetLoadPosition->WhenPressed(new SpinLoad());
	targetTruss = new JoystickButton(operatorStick, 9);
	targetTruss->WhileHeld(new SpinTruss());
	targetShortShot = new JoystickButton(operatorStick, 10);
	targetShortShot->WhileHeld(new SpinShortGoal());
	targetLongShot = new JoystickButton(operatorStick, 7);
	targetLongShot->WhileHeld(new SpinLongGoal());
	tossBall = new JoystickButton(operatorStick, 12);
	tossBall->WhileHeld(new SpinToss());
	rollerControl = new JoystickButton(operatorStick, 3);
	rollerControl->WhileHeld(new OperatorRollerControl());
	flipperUp = new JoystickButton(operatorStick, 5);
	flipperUp->WhenPressed(new ManualFlipperUp());
	forceShotButton = new JoystickButton(operatorStick, 2);
	forceShotButton->WhileHeld(new ForceShot());
	alsoShootBall = new JoystickButton(operatorStick, 1);
	alsoShootBall->WhileHeld(new Shoot());
	throttleDriveStick = new Joystick(2);
	
	collectorUp = new JoystickButton(throttleDriveStick, 3);
	collectorUp->WhileHeld(new CollectorUP());
	collectorDown = new JoystickButton(throttleDriveStick, 2);
	collectorDown->WhileHeld(new CollectThenFlip());
	shiftDown = new JoystickButton(throttleDriveStick, 1);
	shiftDown->WhileHeld(new TurtleStance());
	steeringDriveStick = new Joystick(1);
	
	invertDrive2 = new JoystickButton(steeringDriveStick, 5);
	invertDrive2->WhileHeld(new InvertedCheesy());
	driverForceShot = new JoystickButton(steeringDriveStick, 2);
	driverForceShot->WhileHeld(new ForceShot());
	shootBall = new JoystickButton(steeringDriveStick, 1);
	shootBall->WhileHeld(new Shoot());
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("Collect", new Collect());
	SmartDashboard::PutData("AutoTarget", new AutoTarget());
	SmartDashboard::PutData("ShooterArmTuningMode", new ShooterArmTuningMode());
	SmartDashboard::PutData("DriveStraightTuning", new DriveStraightTuning());
	SmartDashboard::PutData("TurnToAngleTurning", new TurnToAngleTurning());
	SmartDashboard::PutData("DetectHotGoal", new DetectHotGoal());
	SmartDashboard::PutData("CameraTuning", new CameraTuning());
	SmartDashboard::PutData("ShotTuning", new ShotTuning());
	SmartDashboard::PutData("StartingPosition", new StartingPosition());
	SmartDashboard::PutData("SpinTruss", new SpinTruss());
	SmartDashboard::PutData("SpinToss", new SpinToss());
	SmartDashboard::PutData("AutoShiftMode", new AutoShiftMode());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	
#ifdef VERBOSE_DASHBOARD
    SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
    SmartDashboard::PutData("SingleBallAutonomousCommand", new SingleBallAutonomousCommand());
    SmartDashboard::PutData("TwoBallAutonomousCommand", new TwoBallAutonomousCommand());
    SmartDashboard::PutData("ThreeBallAutonomousCommand", new ThreeBallAutonomousCommand());
    SmartDashboard::PutData("CollectorIdle", new CollectorIdle());
    SmartDashboard::PutData("CollectorUP", new CollectorUP());
    SmartDashboard::PutData("CollectorLoad", new CollectorLoad());
    SmartDashboard::PutData("CollectorDown", new CollectorDown());
    SmartDashboard::PutData("CollectorEject", new CollectorEject());
    SmartDashboard::PutData("Collect", new Collect());
    SmartDashboard::PutData("ShooterIdle", new ShooterIdle());
    SmartDashboard::PutData("PoweredShot", new PoweredShot());
    SmartDashboard::PutData("ShooterSpinUp", new ShooterSpinUp());
    SmartDashboard::PutData("ShooterWheelsAutoTarget", new ShooterWheelsAutoTarget());
    SmartDashboard::PutData("ShooterPistonIdle", new ShooterPistonIdle());
    SmartDashboard::PutData("Shoot", new Shoot());
    SmartDashboard::PutData("BlockerRaise", new BlockerRaise());
    SmartDashboard::PutData("BlockerLower", new BlockerLower());
    SmartDashboard::PutData("BlockerIdle", new BlockerIdle());
    SmartDashboard::PutData("TargetTruss", new TargetTruss());
    SmartDashboard::PutData("TargetLongGoal", new TargetLongGoal());
    SmartDashboard::PutData("TargetShortGoal", new TargetShortGoal());
    SmartDashboard::PutData("ShooterArmDismount", new ShooterArmDismount());
    SmartDashboard::PutData("ArmSecureCatch", new ArmSecureCatch());
    SmartDashboard::PutData("TargetLoadPosition", new TargetLoadPosition());
    SmartDashboard::PutData("TargetEjectPosition", new TargetEjectPosition());
    SmartDashboard::PutData("ArmCatchPosition", new ArmCatchPosition());
    SmartDashboard::PutData("DriveTwoFeet", new DriveTwoFeet());
    SmartDashboard::PutData("Drive", new Drive());
    SmartDashboard::PutData("Turn90Degrees", new Turn90Degrees());
    SmartDashboard::PutData("Turn180Degrees", new Turn180Degrees());
    SmartDashboard::PutData("DownShift", new DownShift());
    SmartDashboard::PutData("UpShift", new UpShift());
    SmartDashboard::PutData("CheesyDrive", new CheesyDrive());
    SmartDashboard::PutData("ArcadeDrive", new ArcadeDrive());
    SmartDashboard::PutData("CompressorStart", new CompressorStart());
    SmartDashboard::PutData("CompressorStop", new CompressorStop());
    SmartDashboard::PutData("LoadBall", new LoadBall());
    SmartDashboard::PutData("TargetStartPosition", new TargetStartPosition());
    SmartDashboard::PutData("CatchClose", new CatchClose());
    SmartDashboard::PutData("CatchOpen", new CatchOpen());
#endif
    spinChooser = new SendableChooser();
    spinChooser->AddObject("Speed Control", (void *)true);
    spinChooser->AddDefault("Full Power", (void *)false);
    SmartDashboard::PutData("Long Shot Mode:", spinChooser);
    
//    controlChooser = new SendableChooser();
//    controlChooser->AddDefault("Joysticks", (void *)false);
//    controlChooser->AddObject("Controller", (void *)true);
//    SmartDashboard::PutData("Drive Controls:", controlChooser);
}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
Joystick* OI::getdriveController() {
	return driveController;
}
Joystick* OI::getoperatorStick() {
	return operatorStick;
}
Joystick* OI::getthrottleDriveStick() {
	return throttleDriveStick;
}
Joystick* OI::getsteeringDriveStick() {
	return steeringDriveStick;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
bool OI::GetLongShotType()
{
    return (bool) spinChooser->GetSelected();  
}
bool OI::IsDriverUsingController()
{
//    return (bool) controlChooser->GetSelected();
    return false;
//    return true;
}
