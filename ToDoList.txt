Commands:
Add
	ArmCatchPosition
	ArmSecureCatch
	CheesyDrive //Copy code from Drive
	ArcadeDrive //Copy code from Drive
Remove 
 	ShooterArmTarget
 	ShootTargetTruss
	ShooterWheelTargetLoadPosition
	ShooterWheelsTargetEjectPosition
	ShooterWheelsTargetTruss
	ShooterWheelsTuningMode
	WheelTargetAutonomous1
	WheelTargetAutonomous2
	WheelTargetAutonomous3
	WheelTargetLongGoal
	WheelTargetShortGoal
	
Rename:
	ShooterArmTarget... -> Target...
	ArmTarget...	-> Target...
	ShooterArmAutoTarget -> AutoTarget
	
	



In ShooterSpinUp
	case ShooterArm::LOAD:
		//Robot::shooterWheels->SetTargetRpm(TARGET_LOAD_SPEED);
		Robot::shooterWheels->SetPower(-0.3);
		break;




Implement PowerMode in shooter:

	volatile boolean _rpmControl;

	ShooterWheels::SetPower(float power, float spin_up_delay)
	{
		_rpmControl = False;
		spinUpTimer.Reset();
		spinUpTimer.Start();
		spinUpTimer.SetTimeout(spin_up_delay);
		...
	}
	ShooterWheels.SetRpm(...)
	{
		_rpmControl = True;
		...
	}
	void ShooterWheels::Run()
	{
		if (_rpmControl == False)
			return;
			
		...
	}
	bool ShooterWheels::IsUpToSpeed()
	{
		bool atSpeed = false;
		if (_rpmControl == false)
		{
			atSpeed = spinUpTimer.IsTimedOut();
		}
		else
		{
			...
		}
		return atSpeed;
	}
	







Other stuff:
In ShooterArm subsystem, PID to motor command function, instead of output * 1-cos(angle), use output - (output * cos(angle))
Figure out if trig functions are intended for degrees or radians

Camera::GetRange function?


Tune the three PID systems (Arm, Turning, DriveStraight)
Find our shot RPMs
Test vision for hot goal
