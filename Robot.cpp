// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
#include "Commands/SingleBallAutonomousCommand.h"
#include "Commands/TwoBallAutonomousCommand.h"
#include "Commands/ThreeBallAutonomousCommand.h"
#include "Commands/DriveTwoBall.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
DriveSubsystem* Robot::driveSubsystem = 0;
ShooterArm* Robot::shooterArm = 0;
ShooterWheels* Robot::shooterWheels = 0;
Collector* Robot::collector = 0;
Camera* Robot::camera = 0;
Shifters* Robot::shifters = 0;
ShooterPiston* Robot::shooterPiston = 0;
CompressorSubsystem* Robot::compressorSubsystem = 0;
OI* Robot::oi = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
void Robot::RobotInit()
{
    RobotMap::init();
//    Robot::theRobot = this;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveSubsystem = new DriveSubsystem();
	shooterArm = new ShooterArm();
	shooterWheels = new ShooterWheels();
	collector = new Collector();
	camera = new Camera();
	shifters = new Shifters();
	shooterPiston = new ShooterPiston();
	compressorSubsystem = new CompressorSubsystem();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    // This MUST be here. If the OI creates Commands (which it very likely
    // will), constructing it during the construction of CommandBase (from
    // which commands extend), subsystems are not guaranteed to be
    // yet. Thus, their requires() statements may grab null pointers. Bad
    // news. Don't move it.
    oi = new OI();
    lw = LiveWindow::GetInstance();
    // instantiate the command used for the autonomous period
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	//preferences = Preferences::GetInstance();
	
    autoChooser = new SendableChooser();
    defaultAuton = new SingleBallAutonomousCommand();
    autoChooser->AddDefault("Single Ball Auton", defaultAuton);
    autoChooser->AddObject("Two Ball Auton", new TwoBallAutonomousCommand());
    autoChooser->AddObject("Three Ball Auton", new ThreeBallAutonomousCommand());
    autoChooser->AddObject("Drive 2 Ball", new DriveTwoBall());
    SmartDashboard::PutData("Autonomous Mode:", autoChooser);
    
    SmartDashboard::PutNumber("Goal Distance", 0.0);
    SmartDashboard::PutString("Goal Side", "Taco Bell");
}
void Robot::AutonomousInit()
{
    driveSubsystem->theDriveTrain->SetSafetyEnabled(false);
    autonomousCommand = (Command *) autoChooser->GetSelected();
    if (autonomousCommand == NULL)
        autonomousCommand = defaultAuton; 
        
        
        autonomousCommand->Start();
}
void Robot::AutonomousPeriodic()
{
    Scheduler::GetInstance()->Run();
}
void Robot::TeleopInit()
{
    driveSubsystem->theDriveTrain->SetSafetyEnabled(true);
    driveSubsystem->theDriveTrain->SetExpiration(0.5);
    // This makes sure that the autonomous stops running when
    // teleop starts running. If you want the autonomous to 
    // continue until interrupted by another command, remove
    // this line or comment it out.
    autonomousCommand->Cancel();
    shooterWheels->SetPower(0.0);
}
void Robot::TeleopPeriodic()
{
    Scheduler::GetInstance()->Run();
    float leftRPM, rightRPM;
    shooterWheels->GetRpm(rightRPM,leftRPM);
    SmartDashboard::PutNumber("Left RPM",leftRPM);
    SmartDashboard::PutNumber("Right RPM",rightRPM);
    SmartDashboard::PutNumber("Arm Angle", shooterArm->GetCurrentAngle());
    SmartDashboard::PutNumber("Voltage", shooterArm->GetBatteryVoltage());
        
    
}
void Robot::DisabledInit()
{
    shooterArm->Disable();
//    camera->ResetHotGoal();
//    camera->ConnectCamera();
//    camera->EnableDistanceChecking();
}
void Robot::DisabledPeriodic()
{
//    float leftRPM, rightRPM;
//    
//    shooterWheels->GetRpm(rightRPM,leftRPM);
//    SmartDashboard::PutNumber("Left RPM",leftRPM);
//    SmartDashboard::PutNumber("Right RPM",rightRPM);
//    SmartDashboard::PutNumber("Arm Angle", shooterArm->GetCurrentAngle());
//    SmartDashboard::PutNumber("Goal Distance", camera->GetDistance());
//    
//    static bool camPushed = false;
//    Joystick *op = oi->getoperatorStick();
//    
//    DriverStation *ds = DriverStation::GetInstance();
//    static short prevButtonMap = 0;
//    short buttonMap = ds->GetStickButtons(3);
//    if (buttonMap != prevButtonMap)
//    {
//        printf("Button map %d",buttonMap);
//        for (int i = 0; i < 16; i++)
//        {
//            if (op->GetRawButton(i))
//            {
//                    printf("button %d pressed", i);
//            }
//        }
//        prevButtonMap = buttonMap;
//    }
//    
//    if (op->GetRawButton(1) && (camPushed == false))
//    {
//        camera->SaveImages("test",false);
//        camPushed = true;
//    }
//    else if (op->GetRawButton(3) && (camPushed == false))
//    {
//        string side = "";
//        switch(camera->DetectHotGoal())
//        {
//            case Camera::notDetected:
//                side = "Not Detected";
//                break;
//            case Camera::goalLeft:
//                side = "Left";
//                break;
//            case Camera::goalRight:
//                side = "Right";
//                break;
//            case Camera::neverLooked:
//                side = "Can't Be Bothered";
//                break;
//        }
//        SmartDashboard::PutString("Goal Side", side);
//        camPushed = true;
//    }
//    else if (op->GetRawButton(5) && (camPushed == false))
//    {
//        camPushed = true;
//    }
//    else if ((op->GetRawButton(1) || op->GetRawButton(3) || op->GetRawButton(5)) == false)
//    {
//        camPushed = false;
//    }
}
void Robot::TestPeriodic()
{
    lw->Run();
}
START_ROBOT_CLASS(Robot)
;
