// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveSubsystemleftRearDrive = NULL;
SpeedController* RobotMap::driveSubsystemleftFrontDrive = NULL;
SpeedController* RobotMap::driveSubsystemrightFrontDrive = NULL;
SpeedController* RobotMap::driveSubsystemrightRearDrive = NULL;
RobotDrive* RobotMap::driveSubsystemTheDriveTrain = NULL;
Encoder* RobotMap::driveSubsystemleftEncoder = NULL;
Encoder* RobotMap::driveSubsystemrightEncoder = NULL;
Gyro* RobotMap::driveSubsystemdriveGyro = NULL;
Accelerometer* RobotMap::driveSubsystemdriveAccelerometer = NULL;
AnalogChannel* RobotMap::shooterArmshooterArmPot = NULL;
SpeedController* RobotMap::shooterArmshooterArmMotor = NULL;
DoubleSolenoid* RobotMap::shooterArmGrabber = NULL;
SpeedController* RobotMap::shooterWheelsrightWheelMotor = NULL;
SpeedController* RobotMap::shooterWheelsleftWheelMotor = NULL;
Encoder* RobotMap::shooterWheelsleftCounter = NULL;
Encoder* RobotMap::shooterWheelsrightCounter = NULL;
DoubleSolenoid* RobotMap::shooterWheelsFiringSolenoid = NULL;
DoubleSolenoid* RobotMap::collectorcollectorLifter = NULL;
SpeedController* RobotMap::collectorrollerMotor = NULL;
SpeedController* RobotMap::blockerblockerWinch = NULL;
DigitalInput* RobotMap::blockerraisedLimitSwitch = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	driveSubsystemleftRearDrive = new Victor(1, 2);
	lw->AddActuator("DriveSubsystem", "leftRearDrive", (Victor*) driveSubsystemleftRearDrive);
	
	driveSubsystemleftFrontDrive = new Victor(1, 1);
	lw->AddActuator("DriveSubsystem", "leftFrontDrive", (Victor*) driveSubsystemleftFrontDrive);
	
	driveSubsystemrightFrontDrive = new Victor(1, 3);
	lw->AddActuator("DriveSubsystem", "rightFrontDrive", (Victor*) driveSubsystemrightFrontDrive);
	
	driveSubsystemrightRearDrive = new Victor(1, 4);
	lw->AddActuator("DriveSubsystem", "rightRearDrive", (Victor*) driveSubsystemrightRearDrive);
	
	driveSubsystemTheDriveTrain = new RobotDrive(driveSubsystemleftFrontDrive, driveSubsystemleftRearDrive,
              driveSubsystemrightFrontDrive, driveSubsystemrightRearDrive);
	
	driveSubsystemTheDriveTrain->SetSafetyEnabled(true);
        driveSubsystemTheDriveTrain->SetExpiration(0.1);
        driveSubsystemTheDriveTrain->SetSensitivity(0.5);
        driveSubsystemTheDriveTrain->SetMaxOutput(1.0);
	driveSubsystemleftEncoder = new Encoder(1, 1, 1, 2, false, Encoder::k4X);
	lw->AddSensor("DriveSubsystem", "leftEncoder", driveSubsystemleftEncoder);
	driveSubsystemleftEncoder->SetDistancePerPulse(1.0);
        driveSubsystemleftEncoder->SetPIDSourceParameter(Encoder::kRate);
        driveSubsystemleftEncoder->Start();
	driveSubsystemrightEncoder = new Encoder(1, 3, 1, 4, false, Encoder::k4X);
	lw->AddSensor("DriveSubsystem", "rightEncoder", driveSubsystemrightEncoder);
	driveSubsystemrightEncoder->SetDistancePerPulse(1.0);
        driveSubsystemrightEncoder->SetPIDSourceParameter(Encoder::kRate);
        driveSubsystemrightEncoder->Start();
	driveSubsystemdriveGyro = new Gyro(1, 1);
	lw->AddSensor("DriveSubsystem", "driveGyro", driveSubsystemdriveGyro);
	driveSubsystemdriveGyro->SetSensitivity(0.007);
	driveSubsystemdriveAccelerometer = new Accelerometer(1, 2);
	lw->AddSensor("DriveSubsystem", "driveAccelerometer", driveSubsystemdriveAccelerometer);
	driveSubsystemdriveAccelerometer->SetSensitivity(1.0);
        driveSubsystemdriveAccelerometer->SetZero(2.5);
	shooterArmshooterArmPot = new AnalogChannel(1, 3);
	lw->AddSensor("ShooterArm", "shooterArmPot", shooterArmshooterArmPot);
	
	shooterArmshooterArmMotor = new Victor(1, 5);
	lw->AddActuator("ShooterArm", "shooterArmMotor", (Victor*) shooterArmshooterArmMotor);
	
	shooterArmGrabber = new DoubleSolenoid(1, 5, 6);      
	
	
	shooterWheelsrightWheelMotor = new Victor(1, 6);
	lw->AddActuator("ShooterWheels", "rightWheelMotor", (Victor*) shooterWheelsrightWheelMotor);
	
	shooterWheelsleftWheelMotor = new Victor(1, 7);
	lw->AddActuator("ShooterWheels", "leftWheelMotor", (Victor*) shooterWheelsleftWheelMotor);
	
	shooterWheelsleftCounter = new Encoder(1, 5, 1, 6, false, Encoder::k4X);
	lw->AddSensor("ShooterWheels", "leftCounter", shooterWheelsleftCounter);
	shooterWheelsleftCounter->SetDistancePerPulse(1.0);
        shooterWheelsleftCounter->SetPIDSourceParameter(Encoder::kRate);
        shooterWheelsleftCounter->Start();
	shooterWheelsrightCounter = new Encoder(1, 7, 1, 8, false, Encoder::k4X);
	lw->AddSensor("ShooterWheels", "rightCounter", shooterWheelsrightCounter);
	shooterWheelsrightCounter->SetDistancePerPulse(1.0);
        shooterWheelsrightCounter->SetPIDSourceParameter(Encoder::kRate);
        shooterWheelsrightCounter->Start();
	shooterWheelsFiringSolenoid = new DoubleSolenoid(1, 7, 8);      
	
	
	collectorcollectorLifter = new DoubleSolenoid(1, 1, 2);      
	
	
	collectorrollerMotor = new Victor(1, 8);
	lw->AddActuator("Collector", "rollerMotor", (Victor*) collectorrollerMotor);
	
	blockerblockerWinch = new Victor(1, 9);
	lw->AddActuator("Blocker", "blockerWinch", (Victor*) blockerblockerWinch);
	
	blockerraisedLimitSwitch = new DigitalInput(1, 9);
	lw->AddSensor("Blocker", "raisedLimitSwitch", blockerraisedLimitSwitch);
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
