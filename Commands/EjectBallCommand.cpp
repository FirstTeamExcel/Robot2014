// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "EjectBallCommand.h"
#include "../ShooterWheelsSpeeds.h"
#include "../ShooterArmPositions.h"
EjectBallCommand::EjectBallCommand() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterArm);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    Requires(Robot::shooterWheels);
    Requires(Robot::collector);
}
// Called just before this Command runs the first time
void EjectBallCommand::Initialize() {
	
}
// Called repeatedly when this Command is scheduled to run
void EjectBallCommand::Execute() {
    if (Robot::collector->GetState() != Collector::DOWN)
    {
        Robot::collector->SetCollectorPosition(true);
    }
    else if ((Robot::collector->GetState() == Collector::DOWN) && (Robot::shooterArm->GetTargetPosition() != ShooterArm::EJECT))
    {
        Robot::shooterArm->SetTargetPosition(ShooterArm::EJECT);
    }
    else if ((Robot::shooterArm->GetTargetPosition() == ShooterArm::EJECT) && (Robot::shooterArm->IsOnTarget()))
    {
        Robot::shooterWheels->SetPower(TARGET_EJECT_POWER);
    }
}
// Make this return true when this Command no longer needs to run execute()
bool EjectBallCommand::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void EjectBallCommand::End() {
    Robot::collector->Idle();
    Robot::shooterWheels->SetPower(0.0);
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void EjectBallCommand::Interrupted() {
    End();
}
