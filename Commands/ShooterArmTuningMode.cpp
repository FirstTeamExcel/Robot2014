// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ShooterArmTuningMode.h"
#include "../ShooterArmPositions.h"
ShooterArmTuningMode::ShooterArmTuningMode() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterArm);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	_p = 0.075;
	_i = 0.001;
	_d = 0.0;
	_f = -0.1;
}
// Called just before this Command runs the first time
void ShooterArmTuningMode::Initialize() {
    _angle = Robot::shooterArm->GetCurrentAngle();
    _enabled = false;
    SmartDashboard::PutNumber("Angle",_angle);
    SmartDashboard::PutNumber("P",_p);
    SmartDashboard::PutNumber("I",_i);
    SmartDashboard::PutNumber("D",_d);
    SmartDashboard::PutNumber("F",_f);
    SmartDashboard::PutBoolean("Enable", _enabled);
}
// Called repeatedly when this Command is scheduled to run
void ShooterArmTuningMode::Execute() {
    ShooterArm *arm = Robot::shooterArm;
    SmartDashboard::PutNumber("CurrentAngle", arm->GetCurrentAngle());
    SmartDashboard::PutNumber("CurrentVolts", arm->shooterArmPot->GetVoltage());
    SmartDashboard::PutNumber("Command", arm->shooterArmMotor->Get());
    SmartDashboard::PutNumber("SetP", arm->GetThePIDController()->GetP());
    SmartDashboard::PutNumber("SetI", arm->GetThePIDController()->GetI());
    SmartDashboard::PutNumber("SetD", arm->GetThePIDController()->GetD());
    SmartDashboard::PutNumber("SetTarget", arm->GetThePIDController()->GetSetpoint());
    
    _angle = SmartDashboard::GetNumber("Angle");
    _p = SmartDashboard::GetNumber("P");
    _i = SmartDashboard::GetNumber("I");
    _d = SmartDashboard::GetNumber("D");
    _f = SmartDashboard::GetNumber("F");
    _enabled = SmartDashboard::GetBoolean("Enable");
    
	if (_enabled)
	{
	    arm->Enable();
	    arm->SetTargetAngle(_angle);
	}
	else
	{
	    arm->Disable();
	}
	
	arm->SetPIDF(_p,_i,_d,_f);
	
	
//	arm->SetTargetAngle(SHOOTER_ARM_TUNING_MODE);
}
// Make this return true when this Command no longer needs to run execute()
bool ShooterArmTuningMode::IsFinished() {
    return false;
			
}
// Called once after isFinished returns true
void ShooterArmTuningMode::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShooterArmTuningMode::Interrupted() {
    Robot::shooterArm->Disable();
}
