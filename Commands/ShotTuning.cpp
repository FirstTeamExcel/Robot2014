// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ShotTuning.h"
#include "../ShooterWheelsSpeeds.h"
#include "../ShooterArmPositions.h"

ShotTuning::ShotTuning() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterArm);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    //Requires(Robot::shooterPiston);    
    Requires(Robot::shooterWheels);
	
}
// Called just before this Command runs the first time
void ShotTuning::Initialize() {
    ShooterArm *arm = Robot::shooterArm;
    //_angle = arm->GetCurrentAngle();
    _angle = ARM_TARGET_LONG_GOAL;
    _targetRpm = TARGET_LONG_GOAL_SPEED;
    _bias = 0.0;
    _goToAngle = false;
    _spinUp = false;
    _fire = false;
//    SmartDashboard::PutBoolean("Fire",_fire);
//    SmartDashboard::PutBoolean("SpinUp",_spinUp);
//    SmartDashboard::PutBoolean("GoToAngle",_goToAngle);
//    SmartDashboard::PutNumber("ShotBias",_bias);
}
// Called repeatedly when this Command is scheduled to run
void ShotTuning::Execute() {
    ShooterArm *arm = Robot::shooterArm;
    ShooterWheels *wheels = Robot::shooterWheels;
    
//    static bool prevFire = false;
//    static bool prevSpinUp = false;
//    static bool prevGoToAngle = false;
//    _fire = SmartDashboard::GetBoolean("Fire");
//    _spinUp = SmartDashboard::GetBoolean("SpinUp");
//    _goToAngle = SmartDashboard::GetBoolean("GoToAngle");
//    _angle = SmartDashboard::GetNumber("ShotAngle");
//    _targetRpm = SmartDashboard::GetNumber("ShotRpm");
//    _bias = SmartDashboard::GetNumber("ShotBias");
    
    Joystick *opStick = Robot::oi->getoperatorStick();
    static bool rpmPushed = false;
    if (opStick->GetX() > 0.5)
    {
        _targetRpm += 100;
        rpmPushed = true;
    }
    else if (opStick->GetX() < -0.5)
    {
        _targetRpm -= 100;
        rpmPushed = true;
    }
    else
    {
        rpmPushed = false;
    }
    
    static bool anglePushed = false;
    if (opStick->GetY() < -0.5)
    {
        _angle += 1.0;
        anglePushed = true;
    }
    else if (opStick->GetY() > 0.5)
    {
        _angle -= 1.0;
        anglePushed = true;
    }
    else
    {
        anglePushed = false;
    }
    
    
    if (opStick->GetZ() > 0.5)
    {
        wheels->SetTargetRpm(_targetRpm);
        arm->SetAngle(_angle);
    }
    else
    {
        wheels->SetTargetRpm(0.0);
    }
    SmartDashboard::PutNumber("T_ShotAngle",_angle);
    SmartDashboard::PutNumber("T_ShotRpm",_targetRpm);
//    if ((_goToAngle == true) && (prevGoToAngle == false)) 
//    {
//        arm->SetAngle(_angle);
//        prevGoToAngle = true;
//    }
//    else if (_goToAngle == false)
//    {
//        arm->Disable();
//        prevGoToAngle = false;
//    }
//    
//    if (_spinUp)
//    {
//        wheels->SetTargetRpm(_targetRpm);
//    }
//    else
//    {
//        wheels->SetTargetRpm(0.0);
//    }
    
//    if (_fire)
//    {
//        piston->Fire();
//    }
//    else
//    {
//        piston->Idle();
//    }
//    
//    
//    
}
// Make this return true when this Command no longer needs to run execute()
bool ShotTuning::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void ShotTuning::End() {
    ShooterArm *arm = Robot::shooterArm;
    ShooterWheels *wheels = Robot::shooterWheels;
//    ShooterPiston *piston = Robot::shooterPiston;
//    piston->Idle();
    arm->Disable();
    wheels->SetPower(0.0);
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShotTuning::Interrupted() {
End();
}
