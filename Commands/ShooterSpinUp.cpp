// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ShooterSpinUp.h"
#include "../Subsystems/ShooterWheels.h"
#include "../Subsystems/ShooterArm.h"
#include "../ShooterWheelsSpeeds.h"
#include "UpShift.h"
#include "DownShift.h"
static Command *upShiftCmd = (Command *) 0;
static Command *downShiftCmd = (Command *) 0;
ShooterSpinUp::ShooterSpinUp() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterWheels);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    //Requires(Robot::shifters);
    Requires(Robot::compressorSubsystem);
    
    if (upShiftCmd == (Command *)0)
    {
        upShiftCmd = new UpShift();
        downShiftCmd = new DownShift();
    }
}
// Called just before this Command runs the first time
void ShooterSpinUp::Initialize() {
    
//    if (Robot::shifters->IsHighGear() == true)
//    {
//        Robot::shifters->SetCurrentCommand(downShiftCmd);
//        _wasHighGear = true;
//    }
          _wasHighGear = false;
}
// Called repeatedly when this Command is scheduled to run
void ShooterSpinUp::Execute() {
	ShooterArm::ShooterArmPosition position = Robot::shooterArm->GetTargetPosition();
	Robot::compressorSubsystem->Stop();
	switch(position)
	{
	case ShooterArm::LOAD:
		//Robot::shooterWheels->SetTargetRpm(TARGET_LOAD_SPEED);
		Robot::shooterWheels->SetPower(TARGET_LOAD_POWER);
		break;
	case ShooterArm::EJECT:
        Robot::shooterWheels->SetPower(TARGET_EJECT_POWER);
		break;
	case ShooterArm::LONG_GOAL:
	    if (Robot::oi->GetLongShotType())
	    {
	        Robot::shooterWheels->SetTargetRpm(TARGET_LONG_GOAL_SPEED );
	    }
	    else
	    {
	        Robot::shooterWheels->SetPower(1.0);
	    }
	    break;
	case ShooterArm::REVERSE_SHORT_GOAL:
        Robot::shooterWheels->SetTargetRpm(TARGET_SHORT_GOAL_SPEED, true, 50);
	    break;
	case ShooterArm::SHORT_GOAL:
		Robot::shooterWheels->SetTargetRpm(TARGET_SHORT_GOAL_SPEED, true, 50);
		break;
	case ShooterArm::TRUSS:
#ifdef TARGET_TRUSS_POWER
	    Robot::shooterWheels->SetPower(TARGET_TRUSS_POWER);
#else
		Robot::shooterWheels->SetTargetRpm(TARGET_TRUSS_SPEED);
#endif
		break;
    case ShooterArm::LONG_TRUSS:
        Robot::shooterWheels->SetPower(1.0);
        break;
	case ShooterArm::AUTONOMOUS_1:
        Robot::shooterWheels->SetTargetRpm(TARGET_AUTONOMOUS_1_SPEED);
		break;
	case ShooterArm::AUTONOMOUS_2:
		Robot::shooterWheels->SetTargetRpm(TARGET_AUTONOMOUS_2_SPEED);
		break;
    case ShooterArm::AUTONOMOUS_3:
        Robot::shooterWheels->SetTargetRpm(TARGET_AUTONOMOUS_3_SPEED);
        break;
    case ShooterArm::AUTONOMOUS_CLOSE:
        Robot::shooterWheels->SetTargetRpm(TARGET_AUTONOMOUS_CLOSE_SPEED);
        break;
	default:
        Robot::shooterWheels->SetTargetRpm(0.0);
		break;
	}
}
// Make this return true when this Command no longer needs to run execute()
bool ShooterSpinUp::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void ShooterSpinUp::End() {
//	Robot::shooterWheels->SetPower(0.0);
    Robot::shooterWheels->SetTargetRpm(0.0);
//	UpShift::SetDelay(0.25);
//	if ((_wasHighGear == true) && (Robot::shifters->IsHighGear() == false))
//	{
//	    Robot::shifters->SetCurrentCommand(upShiftCmd);
//	}
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShooterSpinUp::Interrupted() {
    End();
}
