// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "TurnToAngleTurning.h"
#include "../Subsystems/DriveSubsystem.h"
TurnToAngleTurning::TurnToAngleTurning() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveSubsystem);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    DriveSubsystem *driveSub = Robot::driveSubsystem;
//    PIDController *turn = driveSub->turnToAnglePID;
//    _p = turn->GetP();
//    _i = turn->GetI();
//    _d = turn->GetD();
    
}
// Called just before this Command runs the first time
void TurnToAngleTurning::Initialize() {
    _angle = 0.0;
    _enabled = false;
//    Robot::driveSubsystem->driveGyro->Reset();
//    
//    SmartDashboard::PutNumber("Turn Angle",_angle);
//    SmartDashboard::PutBoolean("Enable", _enabled);
//    SmartDashboard::PutNumber("Turn P",_p);
//    SmartDashboard::PutNumber("Turn i",_i);
//    SmartDashboard::PutNumber("Turn d",_d);
}
// Called repeatedly when this Command is scheduled to run
void TurnToAngleTurning::Execute() {
//    DriveSubsystem *driveSub = Robot::driveSubsystem;
//    _p = SmartDashboard::GetNumber("Turn P");
//    _i = SmartDashboard::GetNumber("Turn i");
//    _d = SmartDashboard::GetNumber("Turn d");
//    _angle = SmartDashboard::GetNumber("Turn Angle");
//     _enabled = SmartDashboard::GetBoolean("Enable");
//     static bool prevEnabled = false; 
//     if ((_enabled == true) && (prevEnabled == false))
//     {
//         PIDController *turn = driveSub->driveDistancePID;
//         turn->SetPID(_p,_i,_d);
//         driveSub->TurnToAngle(_angle);
//     }
//     else if (_enabled == false)
//     {
//         driveSub->Cancel();
//         prevEnabled = false;
//     }
}
// Make this return true when this Command no longer needs to run execute()
bool TurnToAngleTurning::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void TurnToAngleTurning::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TurnToAngleTurning::Interrupted() {
    Robot::driveSubsystem->Cancel();
}
