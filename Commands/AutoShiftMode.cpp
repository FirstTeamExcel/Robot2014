// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "AutoShiftMode.h"
#include "Math.h"
//Feet per second
#define AUTO_UP_SHIFT_RATE 6.0
#define AUTO_DOWN_SHIFT_RATE 2.0
AutoShiftMode::AutoShiftMode() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shifters);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void AutoShiftMode::Initialize() {
    Encoder *leftEnc = Robot::driveSubsystem->leftEncoder;
    Encoder *rightEnc = Robot::driveSubsystem->rightEncoder;
    if (Robot::shifters->shiftSolenoid->Get() == DoubleSolenoid::kOff)
    {
        if ((leftEnc->GetRate() > AUTO_UP_SHIFT_RATE) && (rightEnc->GetRate() > AUTO_UP_SHIFT_RATE))
        {
            Robot::shifters->ShiftUp();
        }
        else
        {
            Robot::shifters->ShiftDown();
        }
    }
}
// Called repeatedly when this Command is scheduled to run
void AutoShiftMode::Execute() {
	Encoder *leftEnc = Robot::driveSubsystem->leftEncoder;
	Encoder *rightEnc = Robot::driveSubsystem->rightEncoder;
	
	float leftRate = leftEnc->GetRate();
	double rightRate = rightEnc->GetRate();
	 
	
	SmartDashboard::PutNumber("leftRate:", leftRate);
	SmartDashboard::PutNumber("rightRate:", rightRate);
	    
	
	
	if ((leftRate > AUTO_UP_SHIFT_RATE) && (rightRate > AUTO_UP_SHIFT_RATE))
	{
	    Robot::shifters->ShiftUp();
	}
	else if ((leftRate < AUTO_DOWN_SHIFT_RATE) && (rightRate < AUTO_DOWN_SHIFT_RATE))
	{
	    Robot::shifters->ShiftDown();
	}
	else if (leftEnc->GetStopped() && rightEnc->GetStopped())
	{
	    Robot::shifters->ShiftDown();
	}
	
}
// Make this return true when this Command no longer needs to run execute()
bool AutoShiftMode::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void AutoShiftMode::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoShiftMode::Interrupted() {
}
