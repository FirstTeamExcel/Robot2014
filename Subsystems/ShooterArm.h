// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef SHOOTERARM_H
#define SHOOTERARM_H
#include "Commands/PIDSubsystem.h"
#include "WPILib.h"

//Determine these values (note, the spaces here are important)
#define VOLTAGE_AT_MIN_ANGLE (0.0)
#define VOLTAGE_AT_MAX_ANGLE (5.0)
#define VOLTAGE_RANGE (VOLTAGE_AT_MAX_ANGLE - VOLTAGE_AT_MIN_ANGLE)
#define DEGREES_ROTATION (340.0)
#define VOLTAGE_SCALAR (DEGREES_ROTATION / VOLTAGE_RANGE)   //DegreesPerVolt
#define VOLTAGE_AT_ZERO_DEGREES 1.0
#define VOLTAGE_TO_DEGREES(volts) ((volts - VOLTAGE_AT_ZERO_DEGREES) * VOLTAGE_SCALAR) //Volts * DegreesPerVolt = Degrees
//^^This is a macro, parenthesis immediately after the define allow you to pass a value into the macro and use it

/**
 *
 *
 * @author ExampleAuthor
 */
class ShooterArm: public PIDSubsystem {
	
 private:
	float targetAngle;
	float _maxFeedForward;
	float PIDOutputToMotorCommand(double);
	
 public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	AnalogChannel* shooterArmPot;
	SpeedController* shooterArmMotor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	ShooterArm();
	double ReturnPIDInput();
	void UsePIDOutput(double output);
	void InitDefaultCommand();
//	static const double TARGET = 1.0;
//	static const double TRUSS = 3.0;
//	static const double PASS = 0.0;
	
	float GetCurrentAngle();
	bool IsOnTarget();
	void SetTargetAngle(float tgtAngle);
//	void SetTargetPosition(typedef enum position);
	
	typedef enum {LOAD,EJECT,LONG_GOAL,SHORT_GOAL,TRUSS,AUTONOMOUS_1,AUTONOMOUS_2,AUTONOMOUS_3}ShooterArmPosition;
	ShooterArmPosition GetTargetPosition();
	void SetTargetPosition(ShooterArmPosition position);
 private:
	ShooterArmPosition _targetPosition;
};
#endif
