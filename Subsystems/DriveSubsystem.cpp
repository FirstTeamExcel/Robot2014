// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveSubsystem.h"
#include "../Robotmap.h"
#include "../Commands/Drive.h"
DriveSubsystem::DriveSubsystem() : Subsystem("DriveSubsystem"),
driveOutput(),turnOutput()
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftRearDrive = RobotMap::driveSubsystemleftRearDrive;
	leftFrontDrive = RobotMap::driveSubsystemleftFrontDrive;
	rightFrontDrive = RobotMap::driveSubsystemrightFrontDrive;
	rightRearDrive = RobotMap::driveSubsystemrightRearDrive;
	theDriveTrain = RobotMap::driveSubsystemTheDriveTrain;
	leftEncoder = RobotMap::driveSubsystemleftEncoder;
	rightEncoder = RobotMap::driveSubsystemrightEncoder;
	driveGyro = RobotMap::driveSubsystemdriveGyro;
	driveAccelerometer = RobotMap::driveSubsystemdriveAccelerometer;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	leftEncoder->SetDistancePerPulse(INCHES_PER_PULSE);
	rightEncoder->SetDistancePerPulse(INCHES_PER_PULSE);
	driveStraightPID = new PIDController(DRIVE_STRAIGHT_P,DRIVE_STRAIGHT_I,DRIVE_STRAIGHT_D, 
	    driveGyro,&turnOutput);
	driveDistancePID = new PIDController(DRIVE_DISTANCE_P,DRIVE_DISTANCE_I,DRIVE_DISTANCE_D,
	    leftEncoder, &driveOutput);
}
    
void DriveSubsystem::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new Drive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
}

// Put methods for controlling this subsystem
// here. Call these from Commands.
bool DriveSubsystem::DriveStraight(float inchesToDrive)
{
    driveDistancePID->SetSetpoint(inchesToDrive);
    if (inchesToDrive > 0.0)
    {

        driveDistancePID->SetOutputRange(0.0, 0.8);
    }
    else
    {

        driveDistancePID->SetOutputRange(-0.8, 0.0);    
    }
    
    driveStraightPID->SetSetpoint(0.0);
  
    if (driveDistancePID->IsEnabled() == false)
    {
        driveDistancePID->Enable();
        driveStraightPID->Enable();
    }
    
    if (driveDistancePID->OnTarget())
    {
        driveDistancePID->Disable();
        driveStraightPID->Disable();
        return true;
    }
    else
    {
        theDriveTrain->Drive(driveOutput.GetOutput(),turnOutput.GetOutput());
        return false;
    }
}
