// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef SHOOTERWHEELS_H
#define SHOOTERWHEELS_H
#define FPGA_TIME_TO_MINUTES_FACTOR (60*1000*1000)
//#define MAX_RPM (4100)
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../ShooterWheelsSpeeds.h"
#include "../jankyTask.h"
/**
 *
 *
 * @author ExampleAuthor
 */
class ShooterWheels: public Subsystem, public JankyTask{
private:
	// It's desirable that everything possible under private except
	// for methods that implement subsystem capabilities
    
	volatile bool leftReachedSpeed;
	volatile bool rightReachedSpeed;
	bool takeBack;
	float _targetRpm;
	float power;
//	float delay;
	volatile bool _rpmControl;
	volatile double rightCurrentSpeed;
	volatile double leftCurrentSpeed;
	volatile float _takeBackPower;
	double targetSPR;
	double targetSPR_UpperLimit;
	double targetSPR_LowerLimit;
	Counter* rightCount;
	Counter* leftCount;
    Timer takeBackTimer;
    Timer _spinUpTimer;
//	DoubleSolenoid fireExtend;
//	DoubleSolenoid fireRetract;
//    SendableChooser *ballInflationChooser;
public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	SpeedController* leftWheelMotor;
	SpeedController* rightWheelMotor;
	DigitalInput* leftWheelDigitalInput;
	DigitalInput* rightWheelDigitalInput;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	ShooterWheels();
	void InitDefaultCommand();
    void SetTargetRpm(float targetRpm, bool absoluteTolerance = false, float tolerance = SPEED_TOLERANCE, float takeBackPower = 1.0);
	void SetTargetRpm(float targetRpm, float upperLimitRpm, float lowerLimitRpm, float takeBackPower = 1.0);
	void SetPower(float power);
	void GetRpm(float& rightRpm, float& leftRpm);
	bool IsUpToSpeed();
	void StartTakeBack();
	void Run();
};
#endif
