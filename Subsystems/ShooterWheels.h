// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef SHOOTERWHEELS_H
#define SHOOTERWHEELS_H
#define FPGA_TIME_TO_MINUTES_FACTOR (60*1000*1000)
#define MAX_RPM (4100)
#define SPEED_TOLERANCE (0.1)
#define BALL_ESCAPE_TIME (0.5)
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../jankyTask.h"
/**
 *
 *
 * @author ExampleAuthor
 */
class ShooterWheels: public Subsystem, public JankyTask{
private:
	// It's desirable that everything possible under private except
	// for methods that implement subsystem capabilities

	static const float TAKE_BACK_TIME = 0.4;
	
	bool leftIsUpToSpeed;
	bool rightIsUpToSpeed;
	bool takeBack;
	bool ready;
	float targetRpm;
	float bias;
	float power;
	float delay;
	volatile double rightCurrentSpeed;
	volatile double leftCurrentSpeed;
	double targetSPR_Right;
	double targetSPR_Left;
	double targetSPR_Right_UpperLimit;
	double targetSPR_Left_UpperLimit;
	double targetSPR_Right_LowerLimit;
	double targetSPR_Left_LowerLimit;
	Timer shotTimer;
	Counter rightCount;
	Counter leftCount;
//	DoubleSolenoid fireExtend;
//	DoubleSolenoid fireRetract;
public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	SpeedController* rightWheelMotor;
	SpeedController* leftWheelMotor;
	Encoder* leftCounter;
	Encoder* rightCounter;
	DoubleSolenoid* firingSolenoid;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	ShooterWheels();
	void InitDefaultCommand();
	
	void SetTargetRpm(float targetRpm, float bias);
	void SetPower(float power);
	void GetRpm(float& rightRpm, float& leftRpm);
	bool Fire(float delay = 0);
	bool IsShotComplete();
	bool IsUpToSpeed();
	void Run();
};
#endif
