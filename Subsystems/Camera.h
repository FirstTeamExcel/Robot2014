// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef CAMERA_H
#define CAMERA_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#define Y_IMAGE_RES 480
#define VIEW_ANGLE 49
#define PI 3.141592653
#define AREA_MINIMUM 150
#define MAX_PARTICLES 8
#define RECTANGULARITY_LIMIT 40
#define ASPECT_RATIO_LIMIT 55
#define TAPE_WIDTH_LIMIT 50
#define VERTICAL_SCORE_LIMIT 50
#define LR_SCORE_LIMIT 50

//Structure to represent the scores for the various tests used for target identification
struct Scores {
	double rectangularity;
	double aspectRatioVertical;
	double aspectRatioHorizontal;
};

struct TargetReport
  {
    int verticalIndex;
    int horizontalIndex;
    bool Hot;
    double totalScore;
    double leftScore;
    double rightScore;
    double tapeWidthScore;
    double verticalScore;
    
  };
Threshold threshold(60, 100, 90, 255, 20, 255);
ParticleFilterCriteria2 criteria[] = 
    {
        {IMAQ_MT_AREA, 
            AREA_MINIMUM,
            65535, 
            false,false}
    }; 


/**
 *
 *
 * @author ExampleAuthor
 */
class Camera: public Subsystem {
private:
	// It's desirable that everything possible under private except
	// for methods that implement subsystem capabilities
	AnalyzeImage(RGBImage *image);
	
public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    enum hotGoalSide
    {
      notDetected, 
      goalLeft, 
      goalRight
    };

    
	Camera();
	void InitDefaultCommand();
	void Autonomous();
	void Test();
};
#endif
