// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ShooterWheels.h"
#include "../Robotmap.h"
#include "../Commands/ShooterIdle.h"
#include "../ShooterWheelsSpeeds.h"
ShooterWheels::ShooterWheels() :
    Subsystem("ShooterWheels")
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftWheelMotor = RobotMap::shooterWheelsleftWheelMotor;
	rightWheelMotor = RobotMap::shooterWheelsrightWheelMotor;
	leftWheelDigitalInput = RobotMap::shooterWheelsleftWheelDigitalInput;
	rightWheelDigitalInput = RobotMap::shooterWheelsrightWheelDigitalInput;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	takeBack = false;
	_rpmControl = false;
	_targetRpm = 0.0;
	leftCount = new Counter(leftWheelDigitalInput);
	rightCount = new Counter(rightWheelDigitalInput);
	leftCount->Start();
	rightCount->Start();
	Start();
}
void ShooterWheels::InitDefaultCommand()
{
    // Set the default command for a subsystem here.
    //SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ShooterIdle());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void ShooterWheels::SetTargetRpm(float targetRpm)
{
	_rpmControl = true;
    if (targetRpm > MAX_RPM)
    {
        targetRpm = MAX_RPM;
    }
	_targetRpm = targetRpm;
    if (targetRpm == 0)
    {
        targetSPR = 0;
        targetSPR_UpperLimit = 0;
        targetSPR_LowerLimit = 0;
    }
    else
    {
        targetSPR = ((double) 60.0) / ((double) _targetRpm);
        targetSPR_UpperLimit = (targetSPR * (1.0 + SPEED_TOLERANCE));
        targetSPR_LowerLimit = (targetSPR * (1.0 - SPEED_TOLERANCE));
    }
}
void ShooterWheels::SetPower(float power)
{
	_rpmControl = false;
    
    rightWheelMotor->Set(power);
    leftWheelMotor->Set(-power);
}
void ShooterWheels::GetRpm(float& rightRpm, float& leftRpm)
{
    rightRpm = (60.0 / rightCount->GetPeriod());
    leftRpm = (60.0 / leftCount->GetPeriod());
}
void ShooterWheels::Run()
{
    
    static float lastRightMotorCommand = 0.1;
    static float lastLeftMotorCommand = 0.1;
    float newRightMotorCommand;
    float newLeftMotorCommand;
	if (_rpmControl == false)
	{
        lastRightMotorCommand = 0.1;
        lastLeftMotorCommand = 0.1;
		return;
	}
    rightCurrentSpeed = rightCount->GetPeriod();
    leftCurrentSpeed = leftCount->GetPeriod();
    
    if (takeBack)
    {
        newRightMotorCommand = TAKE_BACK_POWER;
        newLeftMotorCommand = TAKE_BACK_POWER;
        if (takeBackTimer.HasPeriodPassed(TAKE_BACK_TIME))
        {
            takeBack = false;
        }
    }
    else if (_targetRpm == 0.0)
    {
        newRightMotorCommand = 0.0;
        newLeftMotorCommand = 0.0;
    }
    else
    {
        if (rightCurrentSpeed > targetSPR)
        {
            newRightMotorCommand = 1.0;
        }
        if (leftCurrentSpeed > targetSPR)
        {
            newLeftMotorCommand = 1.0;
        }
    }
    if (lastRightMotorCommand != newRightMotorCommand)
    {
        rightWheelMotor->Set(newRightMotorCommand);
        lastRightMotorCommand = newRightMotorCommand;
    }
    if (lastLeftMotorCommand != newLeftMotorCommand)
    {
        leftWheelMotor->Set(-newLeftMotorCommand);
        lastLeftMotorCommand = newLeftMotorCommand;
    }
}
bool ShooterWheels::IsUpToSpeed()
{
    //make sure we don't return true if the target is 0
	bool atSpeed= false;
	if (_rpmControl == false)
	{
		//atSpeed = spinUpTimer.HasPeriodPassed(_spin_up_delay);
	    atSpeed = true;
	}
	else
	{
		if (targetSPR == 0.0)
		{
			return false;
		}
		double rightSpeed = rightCurrentSpeed;
		double leftSpeed = leftCurrentSpeed;
		if ((rightSpeed >= targetSPR_LowerLimit) && (rightSpeed <= targetSPR_UpperLimit))
		{
			rightIsUpToSpeed = true;
		}
		else
		{
			rightIsUpToSpeed = false;
		}
		if ((leftSpeed >= targetSPR_LowerLimit) && (leftSpeed
				<= targetSPR_UpperLimit))
		{
			leftIsUpToSpeed = true;
		}
		else
		{
			leftIsUpToSpeed = false;
		}
		
		if ((rightIsUpToSpeed == true) && (leftIsUpToSpeed == true))
		{
			atSpeed = true;
		}
	}
    return atSpeed;
}
void ShooterWheels::StartTakeBack()
{
    takeBack = true;
    takeBackTimer.Reset();
    takeBackTimer.Start();
}
